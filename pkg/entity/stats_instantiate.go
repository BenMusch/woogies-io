package entity

func instantiatePlayerData() []*StatItem {
	gamesStat := &StatItem{Name: "Games",
		//Description:        "The number of games played",
		Total:              0,
		DataType:           SingleType,
		IncrementType:      GameType,
		DenominatorList:    nil,
		IsProfileStat:      true,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addGames}
	turnsStat := &StatItem{Name: "Turns",
		//Description:        "The number of turns the player had",
		Total:              0,
		DataType:           SingleType,
		IncrementType:      EventType,
		DenominatorList:    []*StatItem{gamesStat},
		IsProfileStat:      true,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addTurns}

	scoreStat := &StatItem{Name: "Score",
		//Description:        "The average score of the player",
		Total:              0,
		DataType:           SingleType,
		IncrementType:      GameType,
		DenominatorList:    []*StatItem{gamesStat, turnsStat},
		IsProfileStat:      true,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addScore}

	firstsStat := &StatItem{Name: "Firsts",
		//Description:        "The number of times the player went first",
		Total:              0,
		DataType:           SingleType,
		IncrementType:      GameType,
		DenominatorList:    []*StatItem{gamesStat},
		IsProfileStat:      true,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addFirsts}
	verticalOpeningsStat := &StatItem{Name: "Vertical Openings",
		//Description:        "The number of times the player opened vertically",
		Total:              0,
		DataType:           SingleType,
		IncrementType:      EventType,
		DenominatorList:    []*StatItem{gamesStat},
		IsProfileStat:      true,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addVerticalOpenings}

	exchangesStat := &StatItem{Name: "Exchanges",
		//Description:        "The number of times the player exchanged",
		Total:              0,
		DataType:           SingleType,
		IncrementType:      EventType,
		DenominatorList:    []*StatItem{gamesStat},
		IsProfileStat:      true,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addExchanges}

	phoniesStat := &StatItem{Name: "Phonies",
		//Description:        "The number of phonies plays made",
		Total:              0,
		DataType:           SingleType,
		IncrementType:      EventType,
		DenominatorList:    []*StatItem{gamesStat},
		IsProfileStat:      true,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addPhonies}

	challengedPhoniesStat := &StatItem{Name: "Challenged Phonies",
		//Description:        "The number of phonies plays made that were challenged off the board",
		Total:              0,
		DataType:           ListType,
		IncrementType:      EventType,
		DenominatorList:    []*StatItem{phoniesStat},
		IsProfileStat:      true,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addChallengedPhonies}

	unchallengedPhoniesStat := &StatItem{Name: "Unchallenged Phonies",
		//Description:        "The number of phonies plays made that were not challenged off the board",
		Total:              0,
		DataType:           ListType,
		IncrementType:      EventType,
		DenominatorList:    []*StatItem{phoniesStat},
		IsProfileStat:      true,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addUnchallengedPhonies}

	challengesStat := &StatItem{Name: "Challenges",
		//Description:        "The number of challenges made by the player",
		Total:              0,
		DataType:           SingleType,
		IncrementType:      EventType,
		DenominatorList:    []*StatItem{gamesStat},
		IsProfileStat:      true,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addChallenges}

	challengesWonStat := &StatItem{Name: "Challenges Won",
		//Description:        "The number of challenges won by the player",
		Total:              0,
		DataType:           ListType,
		IncrementType:      EventType,
		DenominatorList:    []*StatItem{challengesStat},
		IsProfileStat:      true,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addChallengesWon}

	challengesLostStat := &StatItem{Name: "Challenges Lost",
		//Description:        "The number challenges lost by the player",
		Total:              0,
		DataType:           SingleType,
		IncrementType:      EventType,
		DenominatorList:    []*StatItem{challengesStat},
		IsProfileStat:      true,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addChallengesLost}

	playsThatWereChallengedStat := &StatItem{Name: "Plays That Were Challenged",
		//Description:        "The number of plays that were challenged by the opponent",
		Total:              0,
		DataType:           ListType,
		IncrementType:      EventType,
		DenominatorList:    []*StatItem{turnsStat},
		IsProfileStat:      true,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addPlaysThatWereChallenged}

	winsStat := &StatItem{Name: "Wins",
		//Description:        "The number of wins",
		Total:              0,
		DataType:           SingleType,
		IncrementType:      GameType,
		DenominatorList:    []*StatItem{gamesStat},
		IsProfileStat:      true,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addWins}
	lossesStat := &StatItem{Name: "Losses",
		//Description:        "The number of losses",
		Total:              0,
		DataType:           SingleType,
		IncrementType:      GameType,
		DenominatorList:    []*StatItem{gamesStat},
		IsProfileStat:      true,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addLosses}
	drawsStat := &StatItem{Name: "Draws",
		//Description:        "The number of draws",
		Total:              0,
		DataType:           SingleType,
		IncrementType:      GameType,
		DenominatorList:    []*StatItem{gamesStat},
		IsProfileStat:      true,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addDraws}
	bingosStat := &StatItem{Name: "Bingos",
		//Description:        "The list of bingos played",
		Total:              0,
		DataType:           ListType,
		IncrementType:      EventType,
		DenominatorList:    []*StatItem{gamesStat},
		IsProfileStat:      true,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addBingos}

	noBingosStat := &StatItem{Name: "Bingoless Games",
		//Description:        "The list of bingos played",
		Total:              0,
		DataType:           ListType,
		IncrementType:      GameType,
		DenominatorList:    []*StatItem{gamesStat},
		IsProfileStat:      false,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addNoBingos}

	tripleTriplesStat := &StatItem{Name: "Triple Triples",
		//Description:        "Number of triple triples played",
		Total:              0,
		DataType:           ListType,
		IncrementType:      EventType,
		DenominatorList:    []*StatItem{gamesStat},
		IsProfileStat:      false,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addTripleTriples}

	bingoNinesOrAboveStat := &StatItem{Name: "Bingo Nines or Above",
		//Description:        "The list of bingos that were nines tiles or above",
		Total:              0,
		DataType:           ListType,
		IncrementType:      EventType,
		DenominatorList:    []*StatItem{gamesStat},
		IsProfileStat:      false,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addBingoNinesOrAbove}

	highGameStat := &StatItem{Name: "Highest Scoring Game",
		//Description:        "The game with the highest score",
		Total:              0,
		DataType:           MaximumType,
		IncrementType:      GameType,
		DenominatorList:    nil,
		IsProfileStat:      false,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        setHighGame}

	lowGameStat := &StatItem{Name: "Lowest Scoring Game",
		//Description:        "The game with the lowest score",
		Total:              MaxNotableInt,
		DataType:           MinimumType,
		IncrementType:      GameType,
		DenominatorList:    nil,
		IsProfileStat:      false,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        setLowGame}

	highTurnStat := &StatItem{Name: "Highest Scoring Turn",
		//Description:        "The turn with the highest score",
		Total:              0,
		DataType:           MaximumType,
		IncrementType:      EventType,
		DenominatorList:    nil,
		IsProfileStat:      false,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        setHighTurn}

	tilesPlayedStat := &StatItem{Name: "Tiles Played",
		//Description:        "The number of tiles played",
		Total:              0,
		DataType:           SingleType,
		IncrementType:      EventType,
		DenominatorList:    []*StatItem{gamesStat},
		IsProfileStat:      false,
		List:               []*ListItem{},
		Subitems:           makeAlphabetSubitems(),
		HasMeaningfulTotal: true,
		AddFunction:        addTilesPlayed}

	turnsWithBlankStat := &StatItem{Name: "Turns With at Least One Blank",
		//Description:        "The number of turns where the player had at least one blank on their rack",
		Total:              0,
		DataType:           SingleType,
		IncrementType:      EventType,
		DenominatorList:    []*StatItem{turnsStat},
		IsProfileStat:      false,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addTurnsWithBlank}

	commentsStat := &StatItem{Name: "Comments",
		//Description:        "The number of annotated comments",
		Total:              0,
		DataType:           ListType,
		IncrementType:      EventType,
		DenominatorList:    []*StatItem{gamesStat},
		IsProfileStat:      false,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addComments}

	mistakesStat := &StatItem{Name: "Mistakes",
		//Description:        "The number, type, and magnitude of self-recorded mistakes",
		Total:              0,
		DataType:           ListType,
		IncrementType:      EventType,
		DenominatorList:    []*StatItem{gamesStat},
		IsProfileStat:      false,
		List:               []*ListItem{},
		Subitems:           makeMistakeSubitems(),
		HasMeaningfulTotal: true,
		AddFunction:        addMistakes}

	confidenceIntervalsStat := &StatItem{Name: "Confidence Intervals",
		//Description:   "The confidence intervals for each tile drawn",
		Total:         0,
		DataType:      SingleType,
		IncrementType: FinalType,
		// Not actually a denominatorList, just a needed ref
		// because this stat is special
		DenominatorList:    []*StatItem{tilesPlayedStat},
		IsProfileStat:      false,
		List:               []*ListItem{},
		HasMeaningfulTotal: true,
		AddFunction:        addConfidenceIntervals}

	return []*StatItem{bingoNinesOrAboveStat,
		bingosStat,
		challengedPhoniesStat,
		challengesStat,
		challengesLostStat,
		challengesWonStat,
		commentsStat,
		confidenceIntervalsStat, // Not tested
		drawsStat,
		exchangesStat,
		firstsStat,
		gamesStat,
		highGameStat,
		highTurnStat,
		lossesStat,
		lowGameStat,
		noBingosStat,
		mistakesStat,
		phoniesStat, // Not tested
		playsThatWereChallengedStat,
		scoreStat,
		tilesPlayedStat,
		tripleTriplesStat, // Not tested
		turnsStat,
		turnsWithBlankStat,
		unchallengedPhoniesStat, // Not tested
		verticalOpeningsStat,
		winsStat,
	}
	/*
		Missing stats:
			Full rack per turn
			Bonus square coverage
			Triple Triples
			Comments word length
			Dynamic Mistakes
			Confidence Intervals
			Bingo Probabilities? (kinda)
	*/
}

func instantiateNotableData() []*StatItem {
	return []*StatItem{&StatItem{Name: "No Blanks Played",
		//Description:        "Games in which no blanks are played",
		Minimum:            0,
		Maximum:            0,
		Total:              0,
		DataType:           ListType,
		IncrementType:      EventType,
		IsProfileStat:      false,
		List:               []*ListItem{},
		HasMeaningfulTotal: false,
		AddFunction:        addBlanksPlayed},

		&StatItem{Name: "High Scoring",
			//Description:        "Games in which one player scores at least 700 points",
			Minimum:            700,
			Maximum:            MaxNotableInt,
			Total:              0,
			DataType:           ListType,
			IncrementType:      GameType,
			IsProfileStat:      false,
			List:               []*ListItem{},
			HasMeaningfulTotal: false,
			AddFunction:        addHighScoring},

		&StatItem{Name: "Combined High Scoring",
			//Description:        "Games in which the combined score is at least 1100 points",
			Minimum:            1100,
			Maximum:            MaxNotableInt,
			Total:              0,
			DataType:           ListType,
			IncrementType:      GameType,
			IsProfileStat:      false,
			List:               []*ListItem{},
			HasMeaningfulTotal: false,
			AddFunction:        addCombinedScoring},

		&StatItem{Name: "Combined Low Scoring",
			//Description:        "Games in which the combined score no greater than 200 points",
			Minimum:            0,
			Maximum:            200,
			Total:              0,
			DataType:           ListType,
			IncrementType:      GameType,
			IsProfileStat:      false,
			List:               []*ListItem{},
			HasMeaningfulTotal: false,
			AddFunction:        addCombinedScoring},

		&StatItem{Name: "One Player Plays Every Power Tile",
			//Description:        "Games in which one player plays the Z, X, Q, J, every blank, and every S",
			Minimum:            10,
			Maximum:            10,
			Total:              0,
			DataType:           ListType,
			IncrementType:      EventType,
			IsProfileStat:      false,
			List:               []*ListItem{},
			HasMeaningfulTotal: false,
			AddFunction:        addEveryPowerTile},

		&StatItem{Name: "One Player Plays Every E",
			//Description:        "Games in which one player plays every E",
			Minimum:            12,
			Maximum:            12,
			Total:              0,
			DataType:           ListType,
			IncrementType:      EventType,
			IsProfileStat:      false,
			List:               []*ListItem{},
			HasMeaningfulTotal: false,
			AddFunction:        addEveryE},

		&StatItem{Name: "Many Challenges",
			//Description:        "Games in which there are at least 5 challenges made",
			Minimum:            5,
			Maximum:            MaxNotableInt,
			Total:              0,
			DataType:           ListType,
			IncrementType:      EventType,
			IsProfileStat:      false,
			List:               []*ListItem{},
			HasMeaningfulTotal: false,
			AddFunction:        addManyChallenges},

		&StatItem{Name: "Four or More Consecutive Bingos",
			//Description:        "Games in which there are at least four consecutive bingos",
			Minimum:            4,
			Maximum:            MaxNotableInt,
			Total:              0,
			DataType:           ListType,
			IncrementType:      EventType,
			IsProfileStat:      false,
			List:               []*ListItem{},
			Subitems:           map[string]int{"player_one_streak": 0, "player_two_streak": 0},
			HasMeaningfulTotal: false,
			AddFunction:        addConsecutiveBingos},
	}
}
