syntax = "proto3";
package puzzle_service;
option go_package = "github.com/domino14/liwords/rpc/api/proto/puzzle_service";

import "macondo/api/proto/macondo/macondo.proto";
import "google/protobuf/timestamp.proto";
import "api/proto/ipc/omgwords.proto";

message RandomUnansweredPuzzleIdRequest { string lexicon = 1; }

message RandomUnansweredPuzzleIdResponse { string puzzle_id = 1; }

message PuzzleRequest { string puzzle_id = 1; }

enum PuzzleStatus {
  UNANSWERED = 0;
  CORRECT = 1;
  INCORRECT = 2;
}

message PuzzleResponse {
  macondo.GameHistory history = 1;
  string before_text = 2;
  int32 attempts = 3;
  PuzzleStatus status = 4;
  google.protobuf.Timestamp first_attempt_time = 5;
  google.protobuf.Timestamp last_attempt_time = 6;
}

message SubmissionRequest {
  string puzzle_id = 1;
  ipc.ClientGameplayEvent answer = 2;
  bool show_solution = 3;
}

message SubmissionResponse {
  PuzzleStatus status = 1;
  macondo.GameEvent correct_answer = 2;
  string game_id = 3;
  string after_text = 4;
  int32 attempts = 5;
  google.protobuf.Timestamp first_attempt_time = 6;
  google.protobuf.Timestamp last_attempt_time = 7;
}

message PreviousPuzzleRequest { string puzzle_id = 1; }

message PreviousPuzzleResponse { string puzzle_id = 1; }

message PuzzleVoteRequest {
  string puzzle_id = 1;
  int32 vote = 2;
}

message PuzzleVoteResponse {}

service PuzzleService {
  rpc GetRandomUnansweredPuzzleIdForUser(RandomUnansweredPuzzleIdRequest)
      returns (RandomUnansweredPuzzleIdResponse);
  rpc GetPuzzle(PuzzleRequest) returns (PuzzleResponse);
  rpc SubmitAnswer(SubmissionRequest) returns (SubmissionResponse);
  rpc GetPreviousPuzzle(PreviousPuzzleRequest) returns (PreviousPuzzleResponse);
  rpc SetPuzzleVote(PuzzleVoteRequest) returns (PuzzleVoteResponse);
}