syntax = "proto3";
package liwords;
option go_package = "github.com/domino14/liwords/rpc/api/proto/liwords";

// game_service contains the data structures and services needed for the actual
// gameplay. Since gameplay is intended to happen over a full-duplex connection,
// we will not be auto-generating service code; it is here for documentation
// purposes.

import "macondo/api/proto/macondo/macondo.proto";

// message NewGameRequest {
//   repeated macondo.PlayerInfo players = 1;
//   repeated string board_layout = 2;
//   string lexicon = 3;
//   string letter_distribution = 4;
//   // Perhaps an eventual protobuf field that contains a custom letter
//   // distribution, as the above should just be a name ("english", etc).
// }

// message NewGameResponse {}

// A GameRules is just the name of a board layout + the name of a letter
// distribution. These must exist in a database or file somewhere.
message GameRules {
  string board_layout_name = 1;
  string letter_distribution_name = 2;
}

enum GameMode {
  REAL_TIME = 0;
  CORRESPONDENCE = 1;
}

enum RatingMode {
  RATED = 0;
  CASUAL = 1;
}

// Game initialization
// Both SeekRequest and MatchRequest encapsulate a more general GameRequest
// object Both these types of requests can be sent from client to server or
// vice-versa.

message GameRequest {
  string lexicon = 1;
  GameRules rules = 2;
  int32 initial_time_seconds = 3;
  int32 increment_seconds = 4;
  macondo.ChallengeRule challenge_rule = 5;
  GameMode game_mode = 6;
  RatingMode rating_mode = 7;
  string request_id = 8;
}

// A RequestingUser requests a match via a seek or a match request.
message RequestingUser {
  string username = 1;
  int32 relevantRating = 2;
}

// Message types

// In order to make socket messages as small and simple as possible,
// we should include the message type with the socket message.
// Whenever we add a new client <-> server socket message type,
// add it to this list.
enum MessageType {
  SEEK_REQUEST = 0;
  MATCH_REQUEST = 1;
  GAME_ACCEPTED_EVENT = 2;
  CLIENT_GAMEPLAY_EVENT = 3;
  SERVER_GAMEPLAY_EVENT = 4;
  GAME_ENDED_EVENT = 5;
  GAME_HISTORY_REFRESHER = 6;
  ERROR_MESSAGE = 7;
  NEW_GAME_EVENT = 8;
  SERVER_CHALLENGE_RESULT_EVENT = 9;
  SEEK_REQUESTS = 10;
  REGISTER_REALM = 11;
  DEREGISTER_REALM = 12;
  TIMED_OUT = 13;
  TOKEN_SOCKET_LOGIN = 14;
  // Add more events here. The total number of events should fit in a byte.
  // We should definitely not be using anywhere close to 255 events, and
  // in order to enforce that I'll be forcing the event type header to just be
  // a byte long.
}

// Bi-directional messages

message SeekRequest {
  GameRequest game_request = 1;
  RequestingUser user = 2;
  int32 minimum_rating = 3;
  int32 maximum_rating = 4;
}

message MatchRequest {
  GameRequest game_request = 1;
  RequestingUser user = 2;
}

// A GameAcceptedEvent gets sent when a match request (or seek request)
// get accepted (or canceled -- when sent from server to client).
message GameAcceptedEvent { string request_id = 1; }

// Server to client messages:

// SeekRequests sends all open seek requests.
message SeekRequests { repeated SeekRequest requests = 1; }

// The server will send back a ServerGameplayEvent to a ClientGameplayEvent.
// The server will also send these asynchronously for opponent gameplay
// events.
message ServerGameplayEvent {
  macondo.GameEvent event = 1;
  string game_id = 2;
  string new_rack = 3;
  int32 time_remaining = 4;
  macondo.PlayState playing = 5;
}

// The server will send back a challenge result event only in the case of
// a challenge. In all other cases, the server will send back a
// ServerGameplayEvent, and the front-end can
// A ServerChallengeResultEvent is sent back along with a GameHistoryRefresher
// when there is a challenge, instead of trying to reconstruct and send the
// right incremental events. The reason is that the logic is complex and
// has many special cases, and is already fully implemented in Macondo.
// We don't wish to re-implement it both in this repo's backend and frontend.
message ServerChallengeResultEvent {
  bool valid = 1;
  string challenger = 2;
  macondo.ChallengeRule challenge_rule = 3;
}

// GameEndedEvent is always sent from the server to both clients.
message GameEndedEvent {
  map<string, int32> scores = 1;
  map<string, int32> new_ratings = 2;
  GameEndReason end_reason = 3;
  // The winner is not always the highest scoring player; one player can
  // time out. The end_reason should make it clear what happened.
  string winner = 4;
  string loser = 5;
  // If it was a tie, the winner and loser above can be interchanged.
  bool tie = 6;
}

// A GameHistoryRefresher is sent to both players when the game starts,
// and any observers at the time that they begin observing. It can also be sent
// to a player who reconnects in the middle of a game.
message GameHistoryRefresher {
  // The history contains all the moves, points, as well as the last known racks
  // of each player. It also implicitly contains whose turn it is at the moment,
  // by the events / turns in the history.
  // The front-end is responsible for showing all this information in a nice
  // format.
  // Note: the racks of each player should not be sent to both players, only
  // to observers. The back-end will have to be smart enough to overwrite
  // this information with a blank string before sending it. It might not
  // even be that great of a big deal, as I'm sure people can devise other ways
  // to cheat, but shrug.
  macondo.GameHistory history = 1;
  // These represent how much time each player has remaining on their clock
  // as of the "refresher", in milliseconds.
  // player1 is the player who is listed first in the game history, regardless
  // of whether they went first.
  int32 time_player1 = 2;
  int32 time_player2 = 3;
}

// A NewGameEvent gets sent from the server to the involved clients when a new
// game is about to begin. It should follow a GameAcceptedEvent
message NewGameEvent { string game_id = 1; }

message ErrorMessage {
  string message = 1;
  // Maybe codes or something else in the future.
}

// Client-to-server messages

// Gameplay

enum GameEndReason {
  // NONE: the game has not yet ended!
  NONE = 0;
  // TIME: one person timed out (and lost)
  TIME = 1;
  // WENT_OUT: game ended regularly, with one person having zero tiles on their
  // rack.
  STANDARD = 2;
  // 6 consecutive zeroes ends the game.
  CONSECUTIVE_ZEROES = 3;
  RESIGNED = 4;
  ABANDONED = 5;
}

// One or more macondo.GameEvent comprise a full GameTurn (see macondo proto
// file). The server is responsible for joining together events into turns for
// logging purposes. The client will send `macondo.GameEvent` via the websocket.

// We encapsulate the game event here
message ClientGameplayEvent {
  enum EventType {
    TILE_PLACEMENT = 0;
    PASS = 1;
    EXCHANGE = 2;
    CHALLENGE_PLAY = 3;
  }

  EventType type = 1;
  string game_id = 2;
  // position coordinates, like H8 or G10. Only matters for TILE_PLACEMENT.
  string position_coords = 3;
  // tiles that are being played (or exchanged). The `.` character is used
  // for thru, and lowercase characters are used for blanks.
  string tiles = 4;
}

message TimedOut {
  string game_id = 1;
  string username = 2;
}

// Communication

message RegisterRealm { string realm = 1; }

message DeregisterRealm { string realm = 1; }

message TokenSocketLogin { string token = 1; }